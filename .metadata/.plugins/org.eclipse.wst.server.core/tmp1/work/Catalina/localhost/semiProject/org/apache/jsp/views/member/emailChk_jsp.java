/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.69
 * Generated at: 2021-09-21 15:06:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class emailChk_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("UTF-8"); 
      out.write('\r');
      out.write('\n');
 response.setContentType("text/html; charset=UTF-8"); 
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<!-- 폰트 3 -->\r\n");
      out.write("		<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("		<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("		<link href=\"https://fonts.googleapis.com/css2?family=Gowun+Batang:wght@700&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("		<style>\r\n");
      out.write("		h1, h2, h3, h4, h5, h6, p, a, input, button, li, div {\r\n");
      out.write("		    font-family: 'Gowun Batang'!important;\r\n");
      out.write("		  }\r\n");
      out.write("		</style>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>어디어디 이메일 인증번호</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body style=\"background-color: #FFF3E7;\">\r\n");
      out.write("		");
 
			String AuthenticationKey = (String) request.getSession().getAttribute("AuthenticationKey");
			boolean result = false;
		
      out.write("\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("		alert(\"인증번호가 발송되었습니다.\")\r\n");
      out.write("			function chk() {\r\n");
      out.write("				if(document.getElementsByName(\"email_chk\")[0].value == document.getElementsByName(\"AuthenticationKey\")[0].value) {\r\n");
      out.write("					document.getElementsByName(\"email_chk_result\")[0].value = \"인증번호가 일치합니다.\";\r\n");
      out.write("					opener.document.getElementsByName(\"email\")[0].title = \"y\";\r\n");
      out.write("					");
 result = true; 
      out.write("\r\n");
      out.write("				} else {\r\n");
      out.write("					document.getElementsByName(\"email_chk_result\")[0].value = \"인증번호가 일치하지 않습니다.\";\r\n");
      out.write("					opener.document.getElementsByName(\"email\")[0].title = \"n\";\r\n");
      out.write("				}\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			function confirm(bool) {\r\n");
      out.write("				if(bool) {\r\n");
      out.write("					//인증번호가 일치한다면\r\n");
      out.write("					opener.document.getElementsByName(\"email\")[0].focus();\r\n");
      out.write("				} else {\r\n");
      out.write("					//인증번호가 일치하지 않는다면\r\n");
      out.write("					alert(\"인증번호가 일치하지 않습니다.\");\r\n");
      out.write("					opener.document.getElementsByName(\"email\")[0].focus();\r\n");
      out.write("					opener.document.getElementsByName(\"email\")[0].val('');\r\n");
      out.write("				}\r\n");
      out.write("				//사용이 완료된 팝업창 닫기\r\n");
      out.write("				self.close();\r\n");
      out.write("			}\r\n");
      out.write("		</script>\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		<table style=\"width: 80%; margin-left: 10%; margin-top: 15%; height: 300px; border: none;\">\r\n");
      out.write("				<caption style=\"margin-top: -7%;\"><h2>인증번호를 입력하세요.</h2></caption>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td style=\"border: none;\">\r\n");
      out.write("					<input type=\"text\" name=\"email_chk\" style=\"text-align:center; width: 98%; height: 100%; font-size: 20px;\">\r\n");
      out.write("					<input type=\"hidden\" name=\"AuthenticationKey\" value=\"");
      out.print(AuthenticationKey);
      out.write("\">\r\n");
      out.write("				</td>\r\n");
      out.write("				<td rowspan=\"2\" style=\"border: none;\"><input type=\"button\" name=\"chk\" value=\"인증번호 확인\" onclick=\"chk();\" style=\"border: none; background-color: #D958A0; color: #ffffff; width: 100%; height: 103%; font-size: 20px;\"/></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td style=\"border: none;\"><input type=\"text\" name=\"email_chk_result\" readonly=\"readonly\" style=\"color: #D34B32; text-align:center; width: 98%; height: 104%; font-size: 19px;\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"2\" style=\"height:70px; border: none;\"><input type=\"button\" value=\"닫기\" onclick=\"confirm(");
      out.print(result);
      out.write(");\" style=\"border: none; background-color: #545554; color: #ffffff; width: 100%; height: 100%; font-size: 20px;\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
